version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: privacy-mark-db
    environment:
      POSTGRES_USER: ${DB_USER:-pmuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pmpassword}
      POSTGRES_DB: ${DB_NAME:-privacymark_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - privacy-mark-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pmuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: privacy-mark-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - privacy-mark-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: privacy-mark-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${DB_USER:-pmuser}:${DB_PASSWORD:-pmpassword}@postgres:5432/${DB_NAME:-privacymark_db}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./generated_contexts:/app/generated_contexts:ro
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    networks:
      - privacy-mark-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: privacy-mark-frontend
    environment:
      REACT_APP_API_URL: http://localhost:${BACKEND_PORT:-3000}/api/v1
      REACT_APP_ENVIRONMENT: ${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    networks:
      - privacy-mark-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: privacy-mark-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
    ports:
      - "80:80"
      - "443:443"
    networks:
      - privacy-mark-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production
    restart: unless-stopped

networks:
  privacy-mark-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local